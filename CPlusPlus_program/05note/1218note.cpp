//객체 지향 언어는 클래스의 집합
//클래스에서 파생도니 것이 객체임
//
//클래스 : 사용할 수 없다, 추상개념
//
//객체(instance 변수, object) : 객체가 클래스를 구체화 시켜줌
//
//속성(property, attribute)
//
//행위(method)
//
//instance 변수 1. property : 멤버 변수
//2. method = > 이 둘이 모이면 instance가 됨
//instance가 모이면 클래스가 됨
//
//객체 지향 프로그램 : 객체의 속성 + 행위(method)로 만들어진다.
//위 사양이 모이면 class가 된다.
//
//
//type
//
//interface = > 객체
//    생성자
//    proprty = > 데이터 멤버
//
//    method = > 멤버 함수
//
//
//
//    클래스 정의 = > 속성과 행위 선언
//
//    멤버 함수의 정의 = > 메소드의 정의
//
//    application = > 객체를 instance화 하고 사용함, main()
//
//
//
//
//
//    class 선언 {
//    1. 속성(멤버 변수)
//        2. 생성자 : 디폴트 / 매개변수를 가지는 생성자
//        - 디폴트 생성자 : Circle() - 자동호출, 생성됨(생략가능)
//        - 매개변수 가진 생성자 : Circle(int, int)
//        3. 메소드
//};
//
//
//클래스 안에 다른 클래스를 넣어서 객체화 시킴 = > 컴포지션
//
//- 함수 앞에 get / set을 붙임으로 private 매개 변수에 접근할 수 있도록 함
//ㄴ > get은 얻어오는 것 / set은 넣는 것
//
//
//
//클래스의 스코프->스코프 연산자 - ::
//= > 클래스의 함수의 활동 영역
//    : 스코프는 정확성, 명확성을 주기 위해 쓰는 것
//
//    - const : 한정자
//
//
//    - inline
//    inline double Circle::getRadius() {
//    return radius;
//}
//
//
//구조체를 C++에서 기본적으로 적용하고 있다.
//구조체의 모든 멤버 변수들은 public이다.
//
//클래스에서 모든 멤버 변수들은 private이다.
//
//클래스 선언 / 정의 / application(main메소드) / 생성자 / 소멸자
//
//
//
//-객체의 생성자 특징 : 1. 리턴형이 없다.
//2. 클래스의 이름과 같다.
//ㄴ > 생성자는 객체를 생성하기 때문에 반환형을 가질 필요가 없다.
//데이터 멤버들을 초기화 한다.
//- 생성자의 종류 : 1. 디폴트 생성자
//2. 인자(매개변수)를 가지는 생성자
//3. 복사 생성자(const 한정자를 붙인다.) ┐
//(원본 객체를 변경하지 못하게 하기 위함)
//
//생성->초기화->연산->정리->재활용
//└   생성자   ┘              └   소멸자   ┘
//
//
//1. 디폴트 생성자
//Circle::Circle()
//    : radius(1.0) {  // 초기화
//    ....... // 실행 구문
//
//}
//
//
//2. 인자(매개변수)를 가지는 생성자
//Circle::Circle(double r)
//    : radius(r) {  // 초기화
//    ....... // 실행 구문
//
//}
//
//
//3. 복사 생성자
//Circle::Circle(const Circle & cr)
//    : radius(cr.radius) {  // 초기화
//    ....... // 실행 구문
//
//
//}
//
//
//- 소멸자
//    : 생성자 앞에 '~' 붙여준다.
//    Circle::~Circle()
//
//
//
//    클래스 / 생성자 / 멤버
//    상속 / 복사 생성자
